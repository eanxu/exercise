// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v4.0.0
// source: tif.proto

package tif

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Hdf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdf string `protobuf:"bytes,1,opt,name=hdf,proto3" json:"hdf,omitempty"`
	Xml string `protobuf:"bytes,2,opt,name=xml,proto3" json:"xml,omitempty"`
}

func (x *Hdf) Reset() {
	*x = Hdf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tif_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hdf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hdf) ProtoMessage() {}

func (x *Hdf) ProtoReflect() protoreflect.Message {
	mi := &file_tif_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hdf.ProtoReflect.Descriptor instead.
func (*Hdf) Descriptor() ([]byte, []int) {
	return file_tif_proto_rawDescGZIP(), []int{0}
}

func (x *Hdf) GetHdf() string {
	if x != nil {
		return x.Hdf
	}
	return ""
}

func (x *Hdf) GetXml() string {
	if x != nil {
		return x.Xml
	}
	return ""
}

type Outfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Res string `protobuf:"bytes,1,opt,name=res,proto3" json:"res,omitempty"`
}

func (x *Outfile) Reset() {
	*x = Outfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tif_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Outfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Outfile) ProtoMessage() {}

func (x *Outfile) ProtoReflect() protoreflect.Message {
	mi := &file_tif_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Outfile.ProtoReflect.Descriptor instead.
func (*Outfile) Descriptor() ([]byte, []int) {
	return file_tif_proto_rawDescGZIP(), []int{1}
}

func (x *Outfile) GetRes() string {
	if x != nil {
		return x.Res
	}
	return ""
}

type Infile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path   string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Width  int32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *Infile) Reset() {
	*x = Infile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tif_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Infile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Infile) ProtoMessage() {}

func (x *Infile) ProtoReflect() protoreflect.Message {
	mi := &file_tif_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Infile.ProtoReflect.Descriptor instead.
func (*Infile) Descriptor() ([]byte, []int) {
	return file_tif_proto_rawDescGZIP(), []int{2}
}

func (x *Infile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Infile) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Infile) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type Hj struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tifs []string `protobuf:"bytes,1,rep,name=tifs,proto3" json:"tifs,omitempty"`
}

func (x *Hj) Reset() {
	*x = Hj{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tif_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hj) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hj) ProtoMessage() {}

func (x *Hj) ProtoReflect() protoreflect.Message {
	mi := &file_tif_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hj.ProtoReflect.Descriptor instead.
func (*Hj) Descriptor() ([]byte, []int) {
	return file_tif_proto_rawDescGZIP(), []int{3}
}

func (x *Hj) GetTifs() []string {
	if x != nil {
		return x.Tifs
	}
	return nil
}

type AddCoordinateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tiff string `protobuf:"bytes,1,opt,name=tiff,proto3" json:"tiff,omitempty"` // 影像绝对路径
	Xml  string `protobuf:"bytes,2,opt,name=xml,proto3" json:"xml,omitempty"`   // 影像对应的xml文件
}

func (x *AddCoordinateRequest) Reset() {
	*x = AddCoordinateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tif_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCoordinateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCoordinateRequest) ProtoMessage() {}

func (x *AddCoordinateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tif_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCoordinateRequest.ProtoReflect.Descriptor instead.
func (*AddCoordinateRequest) Descriptor() ([]byte, []int) {
	return file_tif_proto_rawDescGZIP(), []int{4}
}

func (x *AddCoordinateRequest) GetTiff() string {
	if x != nil {
		return x.Tiff
	}
	return ""
}

func (x *AddCoordinateRequest) GetXml() string {
	if x != nil {
		return x.Xml
	}
	return ""
}

type AddCoordinateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok    bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`       // 成功 true， 失败 fail
	Wkt   string `protobuf:"bytes,2,opt,name=wkt,proto3" json:"wkt,omitempty"`      // 影像外边框，
	Srid  int32  `protobuf:"varint,3,opt,name=srid,proto3" json:"srid,omitempty"`   // 坐标系，
	Bands int32  `protobuf:"varint,4,opt,name=bands,proto3" json:"bands,omitempty"` // 波段数，
	Res   int32  `protobuf:"varint,5,opt,name=res,proto3" json:"res,omitempty"`     // 分辨率，
}

func (x *AddCoordinateResponse) Reset() {
	*x = AddCoordinateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tif_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCoordinateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCoordinateResponse) ProtoMessage() {}

func (x *AddCoordinateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tif_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCoordinateResponse.ProtoReflect.Descriptor instead.
func (*AddCoordinateResponse) Descriptor() ([]byte, []int) {
	return file_tif_proto_rawDescGZIP(), []int{5}
}

func (x *AddCoordinateResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *AddCoordinateResponse) GetWkt() string {
	if x != nil {
		return x.Wkt
	}
	return ""
}

func (x *AddCoordinateResponse) GetSrid() int32 {
	if x != nil {
		return x.Srid
	}
	return 0
}

func (x *AddCoordinateResponse) GetBands() int32 {
	if x != nil {
		return x.Bands
	}
	return 0
}

func (x *AddCoordinateResponse) GetRes() int32 {
	if x != nil {
		return x.Res
	}
	return 0
}

var File_tif_proto protoreflect.FileDescriptor

var file_tif_proto_rawDesc = []byte{
	0x0a, 0x09, 0x74, 0x69, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x74, 0x69, 0x66,
	0x22, 0x29, 0x0a, 0x03, 0x48, 0x64, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x64, 0x66, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x68, 0x64, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x78, 0x6d, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x78, 0x6d, 0x6c, 0x22, 0x1b, 0x0a, 0x07, 0x4f,
	0x75, 0x74, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x73, 0x22, 0x4a, 0x0a, 0x06, 0x49, 0x6e, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x22, 0x18, 0x0a, 0x02, 0x48, 0x6a, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x66, 0x73, 0x22, 0x3c,
	0x0a, 0x14, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x66, 0x66, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x66, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x78, 0x6d,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x78, 0x6d, 0x6c, 0x22, 0x75, 0x0a, 0x15,
	0x41, 0x64, 0x64, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x6b, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x77, 0x6b, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x72, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x72, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x61, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x61, 0x6e, 0x64,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x72, 0x65, 0x73, 0x32, 0x32, 0x0a, 0x0a, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x24, 0x0a, 0x05, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x12, 0x0b, 0x2e, 0x74, 0x69, 0x66,
	0x2e, 0x49, 0x6e, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0x0c, 0x2e, 0x74, 0x69, 0x66, 0x2e, 0x4f, 0x75,
	0x74, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x00, 0x32, 0x32, 0x0a, 0x0b, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x07, 0x48, 0x64, 0x66, 0x32, 0x54, 0x69,
	0x66, 0x12, 0x08, 0x2e, 0x74, 0x69, 0x66, 0x2e, 0x48, 0x64, 0x66, 0x1a, 0x0c, 0x2e, 0x74, 0x69,
	0x66, 0x2e, 0x4f, 0x75, 0x74, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x00, 0x32, 0x31, 0x0a, 0x0c, 0x43,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x06, 0x48,
	0x6a, 0x54, 0x69, 0x66, 0x73, 0x12, 0x07, 0x2e, 0x74, 0x69, 0x66, 0x2e, 0x48, 0x6a, 0x1a, 0x0c,
	0x2e, 0x74, 0x69, 0x66, 0x2e, 0x4f, 0x75, 0x74, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x00, 0x32, 0x60,
	0x0a, 0x14, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x74, 0x69, 0x66, 0x2e, 0x41, 0x64,
	0x64, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x69, 0x66, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tif_proto_rawDescOnce sync.Once
	file_tif_proto_rawDescData = file_tif_proto_rawDesc
)

func file_tif_proto_rawDescGZIP() []byte {
	file_tif_proto_rawDescOnce.Do(func() {
		file_tif_proto_rawDescData = protoimpl.X.CompressGZIP(file_tif_proto_rawDescData)
	})
	return file_tif_proto_rawDescData
}

var file_tif_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_tif_proto_goTypes = []interface{}{
	(*Hdf)(nil),                   // 0: tif.Hdf
	(*Outfile)(nil),               // 1: tif.Outfile
	(*Infile)(nil),                // 2: tif.Infile
	(*Hj)(nil),                    // 3: tif.Hj
	(*AddCoordinateRequest)(nil),  // 4: tif.AddCoordinateRequest
	(*AddCoordinateResponse)(nil), // 5: tif.AddCoordinateResponse
}
var file_tif_proto_depIdxs = []int32{
	2, // 0: tif.ThumbImage.Thumb:input_type -> tif.Infile
	0, // 1: tif.SwitchImage.Hdf2Tif:input_type -> tif.Hdf
	3, // 2: tif.CombineImage.HjTifs:input_type -> tif.Hj
	4, // 3: tif.AddCoordinateService.AddCoordinate:input_type -> tif.AddCoordinateRequest
	1, // 4: tif.ThumbImage.Thumb:output_type -> tif.Outfile
	1, // 5: tif.SwitchImage.Hdf2Tif:output_type -> tif.Outfile
	1, // 6: tif.CombineImage.HjTifs:output_type -> tif.Outfile
	5, // 7: tif.AddCoordinateService.AddCoordinate:output_type -> tif.AddCoordinateResponse
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_tif_proto_init() }
func file_tif_proto_init() {
	if File_tif_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tif_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hdf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tif_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Outfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tif_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Infile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tif_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hj); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tif_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCoordinateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tif_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCoordinateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tif_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_tif_proto_goTypes,
		DependencyIndexes: file_tif_proto_depIdxs,
		MessageInfos:      file_tif_proto_msgTypes,
	}.Build()
	File_tif_proto = out.File
	file_tif_proto_rawDesc = nil
	file_tif_proto_goTypes = nil
	file_tif_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ThumbImageClient is the client API for ThumbImage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ThumbImageClient interface {
	Thumb(ctx context.Context, in *Infile, opts ...grpc.CallOption) (*Outfile, error)
}

type thumbImageClient struct {
	cc grpc.ClientConnInterface
}

func NewThumbImageClient(cc grpc.ClientConnInterface) ThumbImageClient {
	return &thumbImageClient{cc}
}

func (c *thumbImageClient) Thumb(ctx context.Context, in *Infile, opts ...grpc.CallOption) (*Outfile, error) {
	out := new(Outfile)
	err := c.cc.Invoke(ctx, "/tif.ThumbImage/Thumb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThumbImageServer is the server API for ThumbImage service.
type ThumbImageServer interface {
	Thumb(context.Context, *Infile) (*Outfile, error)
}

// UnimplementedThumbImageServer can be embedded to have forward compatible implementations.
type UnimplementedThumbImageServer struct {
}

func (*UnimplementedThumbImageServer) Thumb(context.Context, *Infile) (*Outfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Thumb not implemented")
}

func RegisterThumbImageServer(s *grpc.Server, srv ThumbImageServer) {
	s.RegisterService(&_ThumbImage_serviceDesc, srv)
}

func _ThumbImage_Thumb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Infile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThumbImageServer).Thumb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tif.ThumbImage/Thumb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThumbImageServer).Thumb(ctx, req.(*Infile))
	}
	return interceptor(ctx, in, info, handler)
}

var _ThumbImage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tif.ThumbImage",
	HandlerType: (*ThumbImageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Thumb",
			Handler:    _ThumbImage_Thumb_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tif.proto",
}

// SwitchImageClient is the client API for SwitchImage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SwitchImageClient interface {
	Hdf2Tif(ctx context.Context, in *Hdf, opts ...grpc.CallOption) (*Outfile, error)
}

type switchImageClient struct {
	cc grpc.ClientConnInterface
}

func NewSwitchImageClient(cc grpc.ClientConnInterface) SwitchImageClient {
	return &switchImageClient{cc}
}

func (c *switchImageClient) Hdf2Tif(ctx context.Context, in *Hdf, opts ...grpc.CallOption) (*Outfile, error) {
	out := new(Outfile)
	err := c.cc.Invoke(ctx, "/tif.SwitchImage/Hdf2Tif", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwitchImageServer is the server API for SwitchImage service.
type SwitchImageServer interface {
	Hdf2Tif(context.Context, *Hdf) (*Outfile, error)
}

// UnimplementedSwitchImageServer can be embedded to have forward compatible implementations.
type UnimplementedSwitchImageServer struct {
}

func (*UnimplementedSwitchImageServer) Hdf2Tif(context.Context, *Hdf) (*Outfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hdf2Tif not implemented")
}

func RegisterSwitchImageServer(s *grpc.Server, srv SwitchImageServer) {
	s.RegisterService(&_SwitchImage_serviceDesc, srv)
}

func _SwitchImage_Hdf2Tif_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hdf)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchImageServer).Hdf2Tif(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tif.SwitchImage/Hdf2Tif",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchImageServer).Hdf2Tif(ctx, req.(*Hdf))
	}
	return interceptor(ctx, in, info, handler)
}

var _SwitchImage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tif.SwitchImage",
	HandlerType: (*SwitchImageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hdf2Tif",
			Handler:    _SwitchImage_Hdf2Tif_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tif.proto",
}

// CombineImageClient is the client API for CombineImage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CombineImageClient interface {
	HjTifs(ctx context.Context, in *Hj, opts ...grpc.CallOption) (*Outfile, error)
}

type combineImageClient struct {
	cc grpc.ClientConnInterface
}

func NewCombineImageClient(cc grpc.ClientConnInterface) CombineImageClient {
	return &combineImageClient{cc}
}

func (c *combineImageClient) HjTifs(ctx context.Context, in *Hj, opts ...grpc.CallOption) (*Outfile, error) {
	out := new(Outfile)
	err := c.cc.Invoke(ctx, "/tif.CombineImage/HjTifs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CombineImageServer is the server API for CombineImage service.
type CombineImageServer interface {
	HjTifs(context.Context, *Hj) (*Outfile, error)
}

// UnimplementedCombineImageServer can be embedded to have forward compatible implementations.
type UnimplementedCombineImageServer struct {
}

func (*UnimplementedCombineImageServer) HjTifs(context.Context, *Hj) (*Outfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HjTifs not implemented")
}

func RegisterCombineImageServer(s *grpc.Server, srv CombineImageServer) {
	s.RegisterService(&_CombineImage_serviceDesc, srv)
}

func _CombineImage_HjTifs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hj)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CombineImageServer).HjTifs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tif.CombineImage/HjTifs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CombineImageServer).HjTifs(ctx, req.(*Hj))
	}
	return interceptor(ctx, in, info, handler)
}

var _CombineImage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tif.CombineImage",
	HandlerType: (*CombineImageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HjTifs",
			Handler:    _CombineImage_HjTifs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tif.proto",
}

// AddCoordinateServiceClient is the client API for AddCoordinateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AddCoordinateServiceClient interface {
	AddCoordinate(ctx context.Context, in *AddCoordinateRequest, opts ...grpc.CallOption) (*AddCoordinateResponse, error)
}

type addCoordinateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAddCoordinateServiceClient(cc grpc.ClientConnInterface) AddCoordinateServiceClient {
	return &addCoordinateServiceClient{cc}
}

func (c *addCoordinateServiceClient) AddCoordinate(ctx context.Context, in *AddCoordinateRequest, opts ...grpc.CallOption) (*AddCoordinateResponse, error) {
	out := new(AddCoordinateResponse)
	err := c.cc.Invoke(ctx, "/tif.AddCoordinateService/AddCoordinate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddCoordinateServiceServer is the server API for AddCoordinateService service.
type AddCoordinateServiceServer interface {
	AddCoordinate(context.Context, *AddCoordinateRequest) (*AddCoordinateResponse, error)
}

// UnimplementedAddCoordinateServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAddCoordinateServiceServer struct {
}

func (*UnimplementedAddCoordinateServiceServer) AddCoordinate(context.Context, *AddCoordinateRequest) (*AddCoordinateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCoordinate not implemented")
}

func RegisterAddCoordinateServiceServer(s *grpc.Server, srv AddCoordinateServiceServer) {
	s.RegisterService(&_AddCoordinateService_serviceDesc, srv)
}

func _AddCoordinateService_AddCoordinate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCoordinateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddCoordinateServiceServer).AddCoordinate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tif.AddCoordinateService/AddCoordinate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddCoordinateServiceServer).AddCoordinate(ctx, req.(*AddCoordinateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AddCoordinateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tif.AddCoordinateService",
	HandlerType: (*AddCoordinateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCoordinate",
			Handler:    _AddCoordinateService_AddCoordinate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tif.proto",
}
